name: TheRock WebApp w/SaltStack
version: 2.9
formatVersion: 1
inputs:
  Platform:
    type: string
    oneOf:
      - title: AWS
        const: 'platform:aws'
      - title: Azure
        const: 'platform:azure'
      - title: vSphere
        const: 'platform:vsphere'
    default: 'platform:aws'
  OperatingSystem:
    type: string
    oneOf:
      - title: Linux
        const: linux
      - title: Windows
        const: windows
    default: linux
  WebCompute:
    type: string
    oneOf:
      - title: Tiny
        const: tiny
      - title: Small
        const: small
      - title: Medium
        const: medium
      - title: Large
        const: large
    default: tiny
  DBCompute:
    type: string
    oneOf:
      - title: Tiny
        const: tiny
      - title: Small
        const: small
      - title: Medium
        const: medium
      - title: Large
        const: large
    default: medium
  DBPassword:
    type: string
    description: SA Password for MSSQL / superAdmin password for MongoDB
  WindowsPassword:
    type: string
    description: Password for Windows User ProjectRock
  SSHPublicKey:
    type: string
    default: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCmKkDl1xyE8FJjxDkq61V3Brdh4dtEgWnyLYuy3HxyguFz7wj7R4fheNlK4p6vYTWQk4AqlY3Fw2kzcZl2iuTmUMtFhllD236o7/aaVNw5HJKHp0B9A6LBpYDxSwPuWdotQPVoH7Vp/Ylimo1iVQOIh8t3tBClD/GatFIyw/OyrSpw6ncyw3RYkfC2ITlaCzFKGXv1weZNFK/rtyFcECvK1l4R0qLsR5CvQ/x9hFocRocMeqZ9fNV/+0Qws6f9IXKxYvBuDgMG41RFlsOsmzPNh3OQHy7VhIdeDl18aynUCopZIvM2siUAevlTrb01VOhME8Yr2CecGUI5o8aEw4R7
  Mobile:
    type: string
    default: '+61417874316'
  SendSMS:
    type: string
    oneOf:
      - title: 'Yes'
        const: 'Yes'
      - title: 'No'
        const: 'No'
    default: 'No'
  Web1Name:
    type: string
    default: pr-lin-web01
    title: Web1 Name
  Web2Name:
    type: string
    default: pr-lin-web02
    title: Web2 Name
  DBName:
    type: string
    default: pr-lin-db01
    title: DB Name
resources:
  LoadBalancer:
    type: Cloud.LoadBalancer
    properties:
      customURL: '${env.deploymentName}'
      Number: '${input.Mobile}'
      SendSMS: '${input.SendSMS}'
      Region: 'region:sydney'
      Platform: '${input.Platform}'
      LBName: '${env.deploymentName}'
      Salt: 'Yes'
      Web1: '${input.Web1Name}'
      Web2: '${input.Web2Name}'
      DB: '${input.DBName}'
      sshkey: '${input.SSHPublicKey}'
      dbpass: '${input.DBPassword}'
      os: '${input.OperatingSystem}' 
      windowspassword: '${input.WindowsPassword}'
      routes:
        - port: '80'
          protocol: HTTP
          instancePort: '80'
          instanceProtocol: HTTP
          healthCheckConfiguration:
            port: '80'
            urlPath: /index.php
            protocol: HTTP
            timeoutSeconds: 4
            intervalSeconds: 5
            healthyThreshold: 2
            unhealthyThreshold: 5
      constraints:
        - tag: 'region:sydney'
      network: '${resource.Pub_Net.id}'
      instances:
        - '${resource.Web_Server1.id}'
        - '${resource.Web_Server2.id}'
        - '${resource.Win_Web_Server1.id}'
        - '${resource.Win_Web_Server2.id}'
      internetFacing: true
      name: '${env.deploymentName}'
  Web_Server1:
    type: Cloud.Machine
    properties:
      image: ubuntu2004
      flavor: '${input.WebCompute}'
      constraints: null
      networks:
        - network: '${resource.Web_Priv_Net.id}'
          assignPublicIpAddress: false
          assignment: '${input.Platform == "platform:vsphere" ? "static" : "dynamic"}'
      cloudConfig:
        runcmd:
          - 'hostnamectl set-hostname ${input.Web1Name} --static'
          - 'curl -L https://bootstrap.saltstack.com -o install_salt.sh'
          - sh install_salt.sh -i ${input.Web1Name} -A projectrock-saltmaster.vmware.education
      count: '${input.OperatingSystem == "linux" ? 1 : 0}'
  Win_Web_Server1:
    type: Cloud.Machine
    properties:
      image: Windows2019
      flavor: '${input.WebCompute}'
      constraints: null
      networks:
        - network: '${resource.Web_Priv_Net.id}'
          assignPublicIpAddress: false
          assignment: '${input.Platform == "platform:vsphere" ? "static" : "dynamic"}'
      cloudConfig: |
        <powershell>
        Invoke-WebRequest -Uri "https://repo.saltproject.io/windows/Salt-Minion-Latest-Py3-x86.msi" -OutFile "c:\windows\temp\Salt-Minion-Latest-Py3-x86.msi" 
        msiexec /i c:\windows\temp\Salt-Minion-Latest-Py3-x86.msi /quiet /norestart MASTER=projectrock-saltmaster.vmware.education MINION_ID=${input.Web1Name}
        Rename-Computer -NewName "${input.Web1Name}"
        </powershell>
      count: '${input.OperatingSystem == "windows" ? 1 : 0}'
  Web_Server2:
    type: Cloud.Machine
    properties:
      image: ubuntu2004
      flavor: '${input.WebCompute}'
      constraints: null
      networks:
        - network: '${resource.Web_Priv_Net.id}'
          assignPublicIpAddress: false
          assignment: '${input.Platform == "platform:vsphere" ? "static" : "dynamic"}'
      cloudConfig:
        runcmd:
          - 'hostnamectl set-hostname ${input.Web2Name} --static'
          - 'curl -L https://bootstrap.saltstack.com -o install_salt.sh'
          - sh install_salt.sh -i ${input.Web2Name} -A projectrock-saltmaster.vmware.education
      count: '${input.OperatingSystem == "linux" ? 1 : 0}'
  Win_Web_Server2:
    type: Cloud.Machine
    properties:
      image: Windows2019
      flavor: '${input.WebCompute}'
      constraints: null
      networks:
        - network: '${resource.Web_Priv_Net.id}'
          assignPublicIpAddress: false
          assignment: '${input.Platform == "platform:vsphere" ? "static" : "dynamic"}'
      cloudConfig: |
        <powershell>
        Invoke-WebRequest -Uri "https://repo.saltproject.io/windows/Salt-Minion-Latest-Py3-x86.msi" -OutFile "c:\windows\temp\Salt-Minion-Latest-Py3-x86.msi" 
        msiexec /i c:\windows\temp\Salt-Minion-Latest-Py3-x86.msi /quiet /norestart MASTER=projectrock-saltmaster.vmware.education MINION_ID=${input.Web2Name}
        Rename-Computer -NewName "${input.Web2Name}"
        </powershell>
      count: '${input.OperatingSystem == "windows" ? 1 : 0}'
  Mongo_DB:
    type: Cloud.Machine
    properties:
      mongodb: 'true'
      mssql: 'false'
      DNS: '${env.deploymentName}'
      image: ubuntu2004
      flavor: '${input.DBCompute}'
      constraints:
        - tag: 'region:sydney'
      networks:
        - network: '${resource.DB_Priv_Net.id}'
          assignPublicIpAddress: false
          assignment: '${input.Platform == "platform:vsphere" ? "static" : "dynamic"}'
      cloudConfig:
        runcmd:
          - 'hostnamectl set-hostname ${input.DBName} --static'
          - 'curl -L https://bootstrap.saltstack.com -o install_salt.sh'
          - sh install_salt.sh -i ${input.DBName} -A projectrock-saltmaster.vmware.education
      count: '${input.OperatingSystem == "linux" ? 1 : 0}'
  MSSQL_DB:
    type: Cloud.Machine
    properties:
      mssql: 'true'
      mongodb: 'fale'
      DNS: '${env.deploymentName}'
      image: Windows2019
      flavor: '${input.DBCompute}'
      constraints: null
      networks:
        - network: '${resource.DB_Priv_Net.id}'
          assignPublicIpAddress: false
          assignment: '${input.Platform == "platform:vsphere" ? "static" : "dynamic"}'
      cloudConfig: |
        <powershell>
        Invoke-WebRequest -Uri "https://repo.saltproject.io/windows/Salt-Minion-Latest-Py3-x86.msi" -OutFile "c:\windows\temp\Salt-Minion-Latest-Py3-x86.msi" 
        msiexec /i c:\windows\temp\Salt-Minion-Latest-Py3-x86.msi /quiet /norestart MASTER=projectrock-saltmaster.vmware.education MINION_ID=${input.DBName}
        </powershell>
      count: '${input.OperatingSystem == "windows" ? 1 : 0}'
  Pub_Net:
    type: Cloud.Network
    properties:
      networkType: existing
      constraints:
        - tag: '${input.Platform == "platform:vsphere" ? "network:projectrock" : "function:public"}'
        - tag: '${input.Platform}'
  Web_Priv_Net:
    type: Cloud.Network
    properties:
      networkType: existing
      constraints:
        - tag: '${input.Platform == "platform:vsphere" ? "network:projectrock" : "function:web-priv"}'
        - tag: '${input.Platform}'
  DB_Priv_Net:
    type: Cloud.Network
    properties:
      networkType: existing
      constraints:
        - tag: '${input.Platform == "platform:vsphere" ? "network:projectrock" : "function:database"}'
        - tag: '${input.Platform}'
